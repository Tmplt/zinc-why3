module Ast_opt

  use imp.Imp
  use bv_op.BV_OP
  use int.Int
  use state.State
  use eq_gen.Eq

  (* TODO: use imp_exn *)
  use imp_ex_assignment.Imp_exn

  let rec opt_aexpr (e:aexpr) : aexpr
    variant { e }
    ensures { forall st. aeval st result = aeval st e }
    (*
    ensures {
      forall st.
      let (_, opt_nodecount) = aeval_ex st result in
      let (_, nodecount) = aeval_ex st e in
      opt_nodecount <= nodecount
    }
    *)
  =
    match e with
    | Anum n      -> Anum n
    | Avar x      -> Avar x

    (* Constant reductions *)
    | Aadd e1 e2  ->
      let e1' = opt_aexpr e1 in
      let e2' = opt_aexpr e2 in
      match e1', e2' with
      | Anum n1, Anum n2 -> Anum (n1 + n2)
      | _, _             -> Aadd e1' e2'
      end
    | Aaddu e1 e2 ->
      let e1' = opt_aexpr e1 in
      let e2' = opt_aexpr e2 in
      match e1', e2' with
      | Anum n1, Anum n2 -> Anum (bv_add n1 n2)
      | _, _             -> Aaddu e1' e2'
      end
    | Asub e1 e2  ->
      let e1' = opt_aexpr e1 in
      let e2' = opt_aexpr e2 in
      match e1', e2' with
      | Anum n1, Anum n2 -> Anum (n1 - n2)
      | _, _             ->
        if eq e1' e2' then
          Anum 0
        else
          Asub e1' e2'
      end
    | Asubu e1 e2 ->
      let e1' = opt_aexpr e1 in
      let e2' = opt_aexpr e2 in
      match e1', e2' with
      | Anum n1, Anum n2 -> Anum (bv_sub n1 n2)
      | _, _             ->
        if eq e1' e2' then
          Anum 0
        else
          Asubu e1' e2'
      end
    end

  let rec opt_bexpr (b:bexpr) : bexpr
    variant { b }
    ensures { forall st. beval st result = beval st b }

    (*
    ensures {
      forall st.
      let (_, opt_nodecount) = beval_ex st result in
      let (_, nodecount) = beval_ex st b in
      opt_nodecount <= nodecount
    }
    *)
  =
    match b with
    | Btrue  -> Btrue
    | Bfalse -> Bfalse

    | Bnot b ->
      let b' = opt_bexpr b in
      match b' with
      | Btrue  -> Bfalse
      | Bfalse -> Btrue
      | _      -> Bnot b'
      end
    | Beq a1 a2 ->
      let a1' = opt_aexpr a1 in
      let a2' = opt_aexpr a2 in
      match a1', a2' with
      | Anum lhs, Anum rhs ->
        if lhs = rhs then Btrue else Bfalse
      | _, _               ->
        Beq a1' a2'
      end
    | Ble a1 a2 ->
      let a1' = opt_aexpr a1 in
      let a2' = opt_aexpr a2 in
      match a1', a2' with
      | Anum lhs, Anum rhs ->
        if lhs <= rhs then
          Btrue
        else
          Bfalse
      | _, _               ->
        Ble a1' a2'
      end
    | Band b1 b2 ->
      let b1' = opt_bexpr b1 in
      let b2' = opt_bexpr b2 in
      match b1', b2' with
      | Btrue, Btrue -> Btrue
      | Bfalse, _    -> Bfalse
      | _, Bfalse    -> Bfalse
      | _, _         ->
      if eq b1' b2' then
        b1'
      else
        Band b1' b2'
      end
    end

  let rec opt_com (c:com) : com
    variant { c }
    ensures {
      forall st st'. ceval st result st' = ceval st c st'

      (*
      forall st.
      let (opt_st', opt_nodecount) = ceval_ex st result in
      let (st', nodecount) = ceval_ex st c in
      opt_st' = st' /\ opt_nodecount <= nodecount
      *)
    }
  =
    match c with
    | Cskip        -> Cskip

    | Cassign id a -> Cassign id (opt_aexpr a)
    | Cseq c1 c2   ->
      (* match for CSkip *)
      let c1' = opt_com c1 in
      let c2' = opt_com c2 in
      Cseq c1' c2'
    | Cif b c1 c2  ->
      let b' = opt_bexpr b in
      let c1' = opt_com c1 in
      let c2' = opt_com c2 in
      match b' with
      | Btrue  -> Cseq c1' Cskip
      | Bfalse -> Cseq c2' Cskip
      | _      -> Cif b' c1' c2'
      end
    | Cwhile b c   ->
      let b' = opt_bexpr b in
      let c' = opt_com c in
      match b' with
      | Bfalse -> Cskip
      | _      -> Cwhile b' c'
      end
    end

end

(* vim: syntax=ocaml shiftwidth=2 shiftwidth=2
*)
